datasource db {
  provider = "sqlite" // default will be sqlite for local development you can change it to "postgresql" or "mysql"
  url = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                  String          @id @default(cuid())
  name                String?
  email               String?         @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  transactions        Transaction[]
  categories          Category[]
  settings            Settings?
  stripeCustomer      StripeCustomer?
  transactionsAttemps Int             @default(5)
  categoriesAttemps   Int             @default(5)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StripeCustomer {
  id               String @id @default(cuid())
  stripeCustomerId String
  userId           String @unique
  user             User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Settings {
  id       String @id @default(cuid())
  currency String

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id   String @id @default(cuid())
  name String
  icon String
  type String @default("income")

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, userId, type])
}

model Transaction {
  id          String   @id @default(cuid())
  description String
  amount      Float
  type        String   @default("income")
  date        DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  category     String
  categoryIcon String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MonthHistory {
  userId  String
  day     Int
  month   Int
  year    Int
  income  Float
  expense Float

  @@id([day, month, year, userId])
}

model YearHistory {
  userId  String
  month   Int
  year    Int
  income  Float
  expense Float

  @@id([month, year, userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Currency {
  id     Int     @id @default(autoincrement())
  code   String  @unique
  name   String
  locale String
}

model DefaultCategory {
  id    String @id @default(cuid())
  name  String
  icon  String
  type  String

  @@unique([name, type])
}